import argparse
import json
import os
import tqdm


def generate_rain_images_field(base_coco):

    # The dataset interface expects that the rain images occur in the second half of the annotation file.
    # Generating the rain half of the annotations is simply a matter of shifting the image_id and id fields.
    # segm_file field is ignored.
    total_images = len(base_coco["images"])
    rain_images_field = []
    for image_dict in tqdm.tqdm(base_coco["images"], "Generating rain image info"):
        rain_image_dict = {"file_name": os.path.join("200mm", image_dict["file_name"]),
                           "height":    512,                                                # Ignore height/width of original annotation
                           "width":     1024,                                               # Rain images are downsampled to 1024x512 in weather devkit
                           "id":        image_dict["id"] + total_images}
        rain_images_field.append(rain_image_dict)

    return rain_images_field


def generate_rain_annotations_field(base_coco):

    # The dataset interface expects that the rain images occur in the second half of the annotation file.
    # Generating the rain half of the annotations is simply a matter of shifting the image_id and id fields.
    total_images            = len(base_coco["images"])
    total_annos             = len(base_coco["annotations"])
    rain_annotations_field  = []

    # To generate the bbox labels, the bbox needs to be scaled from the original image size. Hence, the image size from an image id is needed.
    image_id_to_size_dict = {}
    for image_dict in tqdm.tqdm(base_coco["images"], "Mapping images to sizes"):
        image_id_to_size_dict[image_dict["id"]] = (image_dict["width"], image_dict["height"])

    for anno_dict in tqdm.tqdm(base_coco["annotations"], "Generating rain annotation info"):
        
        # Fill in attributes that remain the same (except for ids, which are shifted.)
        rain_anno_dict = {"iscrowd":        anno_dict["iscrowd"],
                          "category_id":    anno_dict["category_id"],
                          "bbox":           anno_dict["bbox"],
                          "image_id":       anno_dict["image_id"] + total_images,
                          "id":             anno_dict["id"] + total_annos}

        # Scale the bbox according to the original size.
        new_width               = 1024
        new_height              = 512
        old_width, old_height   = image_id_to_size_dict[anno_dict["image_id"]]

        width_scale     = new_width / old_width
        height_scale    = new_height / old_height

        new_top_left_x  = width_scale * anno_dict["bbox"][0]
        new_top_left_y  = height_scale * anno_dict["bbox"][1]
        new_bbox_width  = width_scale * anno_dict["bbox"][2]
        new_bbox_height = height_scale * anno_dict["bbox"][3]
        new_bbox        = [new_top_left_x, new_top_left_y, new_bbox_width, new_bbox_height]

        # Set remaining attributes (ignore segmentation)
        rain_anno_dict["bbox"] = new_bbox
        rain_anno_dict["area"] = anno_dict["area"] * width_scale * height_scale

        rain_annotations_field.append(rain_anno_dict)

    return rain_annotations_field


def modify_base_images_field(base_coco):

    # The COCO files generated by MMDetection's conversion script do not account for the base/200mm split created
    # in this implementation. Here, the file_name attribute is modified to have base/*.
    for image_dict in tqdm.tqdm(base_coco["images"], "Modifying base file_name values"):
        image_dict["file_name"] = os.path.join("base", image_dict["file_name"])
        del image_dict["segm_file"]


def modify_base_annotations_field(base_coco):

    # Strip segmentation field from base
    for anno_dict in tqdm.tqdm(base_coco["annotations"], "Modifying base annotation values"):
        del anno_dict["segmentation"]


def merge_fields(categories_field, base_image_field, base_anno_field, rain_image_field, rain_anno_field):

    new_coco_dict               = {}
    new_coco_dict["categories"] = categories_field
    
    new_coco_dict["images"]     = base_image_field
    new_coco_dict["images"].extend(rain_image_field)

    new_coco_dict["annotations"] = base_anno_field
    new_coco_dict["annotations"].extend(rain_anno_field)

    return new_coco_dict


parser = argparse.ArgumentParser(description='Convert Cityscapes COCO format to the rain + base variant used in the experiments')
parser.add_argument('coco_path', help='cityscapes coco annotation path')
parser.add_argument('out_path', help='output coco annotation path')
args = parser.parse_args()

directory   = args.coco_path
out_path    = args.out_path

with open(directory, "r") as coco_file:
    coco_dict = json.load(coco_file)
    
rain_images_field       = generate_rain_images_field(coco_dict)
rain_annotations_field  = generate_rain_annotations_field(coco_dict)
modify_base_images_field(coco_dict)
modify_base_annotations_field(coco_dict)
new_coco_dict           = merge_fields(coco_dict["categories"], coco_dict["images"], coco_dict["annotations"], rain_images_field, rain_annotations_field)

with open(out_path, "w") as new_coco_file:
    json.dump(new_coco_dict, new_coco_file)